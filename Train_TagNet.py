{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN7IVvFqXr3KxPmFoJO6pPX"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"8gYop74gQqK8"},"outputs":[],"source":["import os\n","import time\n","import numpy as np\n","from keras import backend as K\n","from keras.optimizers import SGD\n","from keras.utils import np_utils\n","from sklearn.metrics import confusion_matrix\n","import matplotlib.pyplot as plt\n","from tagger_net import MusicTaggerCRNN\n","from music_tagger_cnn import MusicTaggerCNN\n","from utils import save_data, load_dataset, save_dataset, sort_result, predict_label, load_gt, plot_confusion_matrix, extract_melgrams\n","\n","class Train_TagNet:\n","    def __init__(self):\n","        # Set parameters and paths\n","        self.TRAIN = 0\n","        self.TEST = 1\n","        self.SAVE_MODEL = 0\n","        self.SAVE_WEIGHTS = 0\n","        self.LOAD_MODEL = 0\n","        self.LOAD_WEIGHTS = 1\n","        self.MULTIFRAMES = 1\n","        self.SAVE_DB = 0\n","        self.LOAD_DB = 0\n","        self.nb_classes = 10\n","        self.nb_epoch = 40\n","        self.batch_size = 100\n","        self.time_elapsed = 0\n","        self.tags = np.array(['blues', 'classical', 'country', 'disco', 'hiphop', 'jazz', 'metal', 'pop', 'reggae', 'rock'])\n","        self.model_name = \"crnn_net_adam_ours\"\n","        self.model_path = \"models_trained/\" + self.model_name + \"/\"\n","        self.weights_path = \"models_trained/\" + self.model_name + \"/weights/\"\n","        self.train_songs_list = 'lists/train_songs_list_ours.txt'\n","        self.test_songs_list = 'lists/test_songs_list_ours.txt'\n","        self.train_gt_list = 'lists/train_gt_list_multiframes.txt' if self.MULTIFRAMES else 'lists/train_gt_list.txt'\n","        self.test_gt_list = 'lists/test_gt_ours.txt' if self.MULTIFRAMES else 'lists/test_gt_list.txt'\n","        self.model = None\n","        self._create_directories()\n","        self.X_train, self.y_train, self.X_test, self.y_test, self.num_frames_train, self.num_frames_test = self._load_data()\n","        self.Y_train = np_utils.to_categorical(self.y_train, self.nb_classes)\n","        self.Y_test = np_utils.to_categorical(self.y_test, self.nb_classes)\n","        self._initialize_model()\n","\n","    def _create_directories(self):\n","        if not os.path.exists(self.model_path):\n","            os.makedirs(self.model_path)\n","            print('Path created:', self.model_path)\n","        if not os.path.exists(self.weights_path):\n","            os.makedirs(self.weights_path)\n","            print('Path created:', self.weights_path)\n","\n","    def _load_data(self):\n","        if self.LOAD_DB:\n","            if self.MULTIFRAMES:\n","                print('Loading dataset multiframe...')\n","                X_train, y_train, num_frames_train = load_dataset('')\n","                X_test, y_test, num_frames_test = load_dataset('')\n","            else:\n","                X_train, X_test, y_train, y_test = load_dataset('')\n","        else:\n","            X_train, y_train, num_frames_train = extract_melgrams(self.train_songs_list, self.MULTIFRAMES, process_all_song=False, num_songs_genre=20)\n","            print('X_train shape:', X_train.shape)\n","            X_test, y_test, num_frames_test = extract_melgrams(self.test_songs_list, self.MULTIFRAMES, process_all_song=False, num_songs_genre=10)\n","\n","        if self.SAVE_DB:\n","            if self.MULTIFRAMES:\n","                save_dataset('music_dataset/music_dataset_multiframe_train.h5', X_train, y_train, num_frames_train)\n","                save_dataset('music_dataset/music_dataset_multiframe_test.h5', X_test, y_test, num_frames_test)\n","            else:\n","                save_dataset('music_dataset/music_dataset.h5', X_train, X_test, y_train, y_test)\n","\n","        print(X_train.shape, 'train samples')\n","        print(X_test.shape, 'test samples')\n","\n","        return X_train, y_train, X_test, y_test, num_frames_train, num_frames_test\n","\n","    def _initialize_model(self):\n","        self.model = MusicTaggerCRNN(weights='msd', input_tensor=(1, 96, 1366))\n","        self.model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","        if self.LOAD_WEIGHTS:\n","            self.model.load_weights(self.weights_path + self.model_name + '_epoch_40.h5')\n","\n","        self.model.summary()\n","\n","        # Save model architecture\n","        if self.SAVE_MODEL:\n","            json_string = self.model.to_json()\n","            with open(self.model_path + self.model_name + \".json\", 'w') as f:\n","                f.write(json_string)\n","\n","    def train(self):\n","        if self.TRAIN:\n","            try:\n","                print(\"Training the model\")\n","                with open(self.model_path + self.model_name + \"_scores_training.txt\", 'w') as f_train, \\\n","                     open(self.model_path + self.model_name + \"_scores_test.txt\", 'w') as f_test, \\\n","                     open(self.model_path + self.model_name + \"_scores.txt\", 'w') as f_scores:\n","                    for epoch in range(1, self.nb_epoch + 1):\n","                        t0 = time.time()\n","                        print(\"Number of epoch:\", epoch, \"/\", self.nb_epoch)\n","                        scores = self.model.fit(self.X_train, self.Y_train, batch_size=self.batch_size, epochs=1, verbose=1, validation_data=(self.X_test, self.Y_test))\n","                        self.time_elapsed += time.time() - t0\n","                        print(\"Time Elapsed:\", self.time_elapsed)\n","\n","                        score_train = self.model.evaluate(self.X_train, self.Y_train, verbose=0)\n","                        print('Train Loss:', score_train[0])\n","                        print('Train Accuracy:', score_train[1])\n","                        f_train.write(str(score_train) + \"\\n\")\n","\n","                        score_test = self.model.evaluate(self.X_test, self.Y_test, verbose=0)\n","                        print('Test Loss:', score_test[0])\n","                        print('Test Accuracy:', score_test[1])\n","                        f_test.write(str(score_test) + \"\\n\")\n","\n","                        f_scores.write(str(score_train[0]) + \",\" + str(score_train[1]) + \",\" + str(score_test[0]) + \",\" + str(score_test[1]) + \"\\n\")\n","\n","                        if self.SAVE_WEIGHTS and epoch % 5 == 0:\n","                            self.model.save_weights(self.weights_path + self.model_name + \"_epoch_\" + str(epoch) + \".h5\")\n","                            print(\"Saved model to disk in:\", self.weights_path + self.model_name + \"_epoch\" + str(epoch) + \".h5\")\n","\n","            # Save time elapsed when a sudden close happens / ctrl+C\n","            except KeyboardInterrupt:\n","                pass\n","            finally:\n","                with open(self.model_path + self.model_name + \"_time_elapsed.txt\", 'w') as f:\n","                    f.write(str(self.time_elapsed))\n","\n","    def test(self):\n","        if self.TEST:\n","            print('Predicting...', '\\n')\n","\n","            real_labels_mean = []\n","            real_labels_frames = []\n","            predicted_labels_mean = []\n","            predicted_labels_frames = []\n","\n","            # Get the predicted labels\n","            predictions = self.model.predict(self.X_test)\n","\n","            # Get the predicted and real labels for each song\n","            for i in range(len(self.num_frames_test)):\n","                frames = self.num_frames_test[i]\n","                real_label = int(self.y_test[i])\n","                pred_label_frames = np.argmax(predictions[i * frames: (i + 1) * frames], axis=1)\n","                pred_label_mean = int(np.argmax(np.mean(predictions[i * frames: (i + 1) * frames], axis=0)))\n","                real_labels_frames.append(real_label)\n","                real_labels_mean.append(real_label)\n","                predicted_labels_frames.append(pred_label_frames)\n","                predicted_labels_mean.append(pred_label_mean)\n","\n","            # Calculate confusion matrix using mean and frames\n","            cnf_matrix_mean = confusion_matrix(real_labels_mean, predicted_labels_mean)\n","            cnf_matrix_frames = confusion_matrix(real_labels_frames, predicted_labels_frames)\n","\n","            # Plot non-normalized confusion matrix\n","            plt.figure()\n","            plot_confusion_matrix(cnf_matrix_mean, classes=self.tags, title='Confusion matrix, without normalization (Mean)')\n","            plt.figure()\n","            plot_confusion_matrix(cnf_matrix_frames, classes=self.tags, title='Confusion matrix, without normalization (Frames)')\n","            plt.show()\n","\n","            # Calculate accuracy using mean and frames\n","            accuracy_mean = np.mean(np.array(real_labels_mean) == np.array(predicted_labels_mean))\n","            accuracy_frames = np.mean(np.array(real_labels_frames) == np.array(predicted_labels_frames))\n","            print('Accuracy (Mean):', accuracy_mean)\n","            print('Accuracy (Frames):', accuracy_frames)\n","\n","    def run(self):\n","        self.train()\n","        self.test()\n","\n","if __name__ == \"__main__\":\n","    train_tag_net = Train_TagNet()\n","    train_tag_net.run()\n"]},{"cell_type":"code","source":[],"metadata":{"id":"O5T4b-tEeKhg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"088lXOACeKxA","executionInfo":{"status":"ok","timestamp":1698415969077,"user_tz":-330,"elapsed":25921,"user":{"displayName":"Gaurav Ghop","userId":"17071669418159100136"}},"outputId":"2d8fc9ab-2054-4027-9867-5e25c41dc0d2"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]}]}