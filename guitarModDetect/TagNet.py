{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMzi6MNlVztI082rtL3t5v2"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"SPj9nlJ8PvbG"},"outputs":[],"source":["# -*- coding: utf-8 -*-\n","\"\"\"\n","TagNet architecture implemented in Keras.\n","\n","# References:\n","- [Deep Convolutional Neural Networks for Automatic Music Tagging](https://arxiv.org/abs/1606.00298)\n","- [music-auto_tagging-keras](https://github.com/keunwoochoi/music-auto_tagging-keras)\n","\n","\"\"\"\n","\n","from __future__ import print_function\n","import keras.backend as K\n","from keras.layers import Input, Dense, Dropout, Flatten, Conv2D, MaxPooling2D, BatchNormalization, ELU\n","from keras.models import Model\n","\n","def remove_layer_from_model(model):\n","    if not model.layers:\n","        raise Exception('The model has no layers left to remove.')\n","\n","    model.layers.pop()\n","    if not model.layers:\n","        model.outputs = []\n","    else:\n","        model.layers[-1].outbound_nodes = []\n","        model.outputs = [model.layers[-1].output]\n","    model.built = False\n","\n","def TagNet(weight_mode='msd', input_tensor=None):\n","    \"\"\"\n","    Create the TagNet architecture, optionally loading weights pretrained on the MSD.\n","\n","    # Parameters:\n","        weight_mode: 'None' for random initialization, or 'msd' for pretraining on MSD.\n","        input_tensor: optional input tensor for image input.\n","\n","    # Returns:\n","        A Keras model instance.\n","    \"\"\"\n","    if weight_mode not in {'msd', None}:\n","        raise ValueError('The `weight_mode` parameter should be either `None` or `msd`.')\n","\n","    # Define input shape\n","    input_shape = (96, 1366, 1) if K.image_data_format() == 'channels_last' else (1, 96, 1366)\n","    if input_tensor is None:\n","        mel_input = Input(shape=input_shape)\n","    else:\n","        mel_input = Input(tensor=input_tensor, shape=input_shape)\n","\n","    # Define axis\n","    channel_axis = 3 if K.image_data_format() == 'channels_last' else 1\n","\n","    # Input block\n","    y = BatchNormalization(axis=channel_axis, name='bn_0_freq')(mel_input)\n","\n","    # Conv block 1\n","    y = Conv2D(32, (3, 3), padding='same', name='conv1')(y)\n","    y = BatchNormalization(axis=channel_axis, name='bn1')(y)\n","    y = ELU()(y)\n","    y = MaxPooling2D(pool_size=(2, 4), name='pool1')(y)\n","\n","    # Conv block 2\n","    y = Conv2D(128, (3, 3), padding='same', name='conv2')(y)\n","    y = BatchNormalization(axis=channel_axis, name='bn2')(y)\n","    y = ELU()(y)\n","    y = MaxPooling2D(pool_size=(2, 4), name='pool2')(y)\n","\n","    # Conv block 3\n","    y = Conv2D(128, (3, 3), padding='same', name='conv3')(y)\n","    y = BatchNormalization(axis=channel_axis, name='bn3')(y)\n","    y = ELU()(y)\n","    y = MaxPooling2D(pool_size=(2, 4), name='pool3')(y)\n","\n","    # Conv block 4\n","    y = Conv2D(192, (3, 3), padding='same', name='conv4')(y)\n","    y = BatchNormalization(axis=channel_axis, name='bn4')(y)\n","    y = ELU()(y)\n","    y = MaxPooling2D(pool_size=(3, 5), name='pool4')(y)\n","\n","    # Conv block 5\n","    y = Conv2D(256, (3, 3), padding='same', name='conv5')(y)\n","    y = BatchNormalization(axis=channel_axis, name='bn5')(y)\n","    y = ELU()(y)\n","    y = MaxPooling2D(pool_size=(4, 4), name='pool5')(y)\n","\n","    # Output\n","    y = Flatten(name='flatten')(y)\n","    if weight_mode is None:\n","        y = Dense(10, activation='sigmoid', name='output')(y)\n","        model = Model(mel_input, y)\n","        return model\n","    else:\n","        y = Dense(50, activation='sigmoid', name='output')(y)\n","        if K.image_data_format() == 'channels_last':\n","            raise RuntimeError(\"Please set image_data_format to 'channels_first' in your Keras config file.\")\n","        initial_model = Model(mel_input, y)\n","        initial_model.load_weights('weights/music_tagger_cnn_weights_%s.h5' % K.backend(), by_name=True)\n","\n","        # Replace last layer\n","        remove_layer_from_model(initial_model)\n","        last_layer = initial_model.get_layer('flatten')\n","        predictions = Dense(10, activation='sigmoid', name='predictions')(last_layer.output)\n","        model = Model(initial_model.input, predictions)\n","        return model\n"]},{"cell_type":"markdown","source":[],"metadata":{"id":"6AwwfKeEeakI"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n"],"metadata":{"id":"nNeEPx7DeIMg"},"execution_count":null,"outputs":[]}]}