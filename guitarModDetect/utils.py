{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPmKNX4Wjgu7Jxjt6h+I19u"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"7hxEaBRlUrTK"},"outputs":[],"source":["import os\n","import time\n","import h5py\n","import sys\n","import librosa\n","import audio_processor as ap\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import itertools\n","from math import floor\n","from operator import truediv\n","\n","def save_data(data, name):\n","    with h5py.File(path + name, 'w') as hf:\n","        hf.create_dataset('data', data=data)\n","\n","def load_dataset(dataset_path):\n","    with h5py.File(dataset_path, 'r') as hf:\n","        print('List of arrays in this file: \\n', hf.keys())\n","        data = np.array(hf.get('data'))\n","        labels = np.array(hf.get('labels'))\n","        num_frames = np.array(hf.get('num_frames'))\n","    return data, labels, num_frames\n","\n","def save_dataset(path, data, labels, num_frames):\n","    with h5py.File(path, 'w') as hf:\n","        hf.create_dataset('data', data=data)\n","        hf.create_dataset('labels', data=labels)\n","        hf.create_dataset('num_frames', data=num_frames)\n","\n","def sort_result(tags, preds):\n","    result = zip(tags, preds)\n","    sorted_result = sorted(result, key=lambda x: x[1], reverse=True)\n","    for name, score in sorted_result:\n","        score = np.array(score)\n","        score *= 100\n","        print(name, ':', '%5.3f  ' % score, '   ')\n","    print\n","\n","def predict_label(preds):\n","    labels = preds.argsort()[::-1]\n","    return labels[0]\n","\n","def load_gt(path):\n","    with open(path, \"r\") as insTest:\n","        gt_total = []\n","        for lineTest in insTest:\n","            gt_total.append(int(lineTest))\n","        gt_total = np.array(gt_total)\n","    return gt_total\n","\n","def plot_confusion_matrix(cnf_matrix, classes, title):\n","    cnfm_suma = cnf_matrix.sum(1)\n","    cnfm_suma_matrix = np.repeat(cnfm_suma[:, None], cnf_matrix.shape[1], axis=1)\n","    cnf_matrix = 10000 * cnf_matrix / cnfm_suma_matrix\n","    cnf_matrix = cnf_matrix / (100 * 1.0)\n","    print(cnf_matrix)\n","\n","    fig = plt.figure()\n","    cmap = plt.cm.Blues\n","    plt.imshow(cnf_matrix, interpolation='nearest', cmap=cmap)\n","    plt.title(title)\n","    plt.colorbar()\n","    tick_marks = np.arange(len(classes))\n","    plt.xticks(tick_marks, classes, rotation=45)\n","    plt.yticks(tick_marks, classes)\n","\n","    thresh = cnf_matrix.max() / 2.\n","    for i, j in itertools.product(range(cnf_matrix.shape[0]), range(cnf_matrix.shape[1])):\n","        plt.text(j, i, cnf_matrix[i, j],\n","                 horizontalalignment=\"center\",\n","                 color=\"white\" if cnf_matrix[i, j] > thresh else \"black\")\n","\n","    plt.tight_layout()\n","    plt.ylabel('True label')\n","    plt.xlabel('Predicted label')\n","    fig.savefig(title)\n","\n","def extract_melgrams(list_path, MULTIFRAMES, process_all_guitarClip, num_guitarClips_mod):\n","    melgrams = np.zeros((0, 1, 96, 1366), dtype=np.float32)\n","    guitarClip_paths = open(list_path, 'r').read().splitlines()\n","    labels = list()\n","    num_frames_total = list()\n","    for guitarClip_ind, guitarClip_path in enumerate(guitarClip_paths):\n","        print(guitarClip_path)\n","        if MULTIFRAMES:\n","            melgram = ap.compute_melgram_multiframe(guitarClip_path, process_all_guitarClip)\n","            num_frames = melgram.shape[0]\n","            num_frames_total.append(num_frames)\n","            print('num frames:', num_frames)\n","            if num_guitarClips_mod != '':\n","                index = int(floor(guitarClip_ind / num_guitarClips_mod))\n","                for i in range(0, num_frames):\n","                    labels.append(index)\n","            else:\n","                pass\n","        else:\n","            melgram = ap.compute_melgram(guitarClip_path)\n","\n","        melgrams = np.concatenate((melgrams, melgram), axis=0)\n","    if num_guitarClips_mod != '':\n","        return melgrams, labels, num_frames_total\n","    else:\n","        return melgrams, num_frames_total\n"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VztjTqDkeuKn","executionInfo":{"status":"ok","timestamp":1698416034499,"user_tz":-330,"elapsed":59229,"user":{"displayName":"Gaurav Ghop","userId":"17071669418159100136"}},"outputId":"d9e10f48-4b89-4b0e-8d09-1e098e5519b9"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]}]}